// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pong.proto

package protobuf

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Pedal struct {
	X                    int64    `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y                    int64    `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	W                    int64    `protobuf:"varint,3,opt,name=w,proto3" json:"w,omitempty"`
	H                    int64    `protobuf:"varint,4,opt,name=h,proto3" json:"h,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pedal) Reset()         { *m = Pedal{} }
func (m *Pedal) String() string { return proto.CompactTextString(m) }
func (*Pedal) ProtoMessage()    {}
func (*Pedal) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cd38c31e685b6f4, []int{0}
}

func (m *Pedal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pedal.Unmarshal(m, b)
}
func (m *Pedal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pedal.Marshal(b, m, deterministic)
}
func (m *Pedal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pedal.Merge(m, src)
}
func (m *Pedal) XXX_Size() int {
	return xxx_messageInfo_Pedal.Size(m)
}
func (m *Pedal) XXX_DiscardUnknown() {
	xxx_messageInfo_Pedal.DiscardUnknown(m)
}

var xxx_messageInfo_Pedal proto.InternalMessageInfo

func (m *Pedal) GetX() int64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Pedal) GetY() int64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Pedal) GetW() int64 {
	if m != nil {
		return m.W
	}
	return 0
}

func (m *Pedal) GetH() int64 {
	if m != nil {
		return m.H
	}
	return 0
}

type MovePedal struct {
	Pedal                *Pedal   `protobuf:"bytes,1,opt,name=pedal,proto3" json:"pedal,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MovePedal) Reset()         { *m = MovePedal{} }
func (m *MovePedal) String() string { return proto.CompactTextString(m) }
func (*MovePedal) ProtoMessage()    {}
func (*MovePedal) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cd38c31e685b6f4, []int{1}
}

func (m *MovePedal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MovePedal.Unmarshal(m, b)
}
func (m *MovePedal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MovePedal.Marshal(b, m, deterministic)
}
func (m *MovePedal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MovePedal.Merge(m, src)
}
func (m *MovePedal) XXX_Size() int {
	return xxx_messageInfo_MovePedal.Size(m)
}
func (m *MovePedal) XXX_DiscardUnknown() {
	xxx_messageInfo_MovePedal.DiscardUnknown(m)
}

var xxx_messageInfo_MovePedal proto.InternalMessageInfo

func (m *MovePedal) GetPedal() *Pedal {
	if m != nil {
		return m.Pedal
	}
	return nil
}

type Ball struct {
	X                    int64    `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y                    int64    `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	R                    int64    `protobuf:"varint,3,opt,name=r,proto3" json:"r,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ball) Reset()         { *m = Ball{} }
func (m *Ball) String() string { return proto.CompactTextString(m) }
func (*Ball) ProtoMessage()    {}
func (*Ball) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cd38c31e685b6f4, []int{2}
}

func (m *Ball) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ball.Unmarshal(m, b)
}
func (m *Ball) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ball.Marshal(b, m, deterministic)
}
func (m *Ball) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ball.Merge(m, src)
}
func (m *Ball) XXX_Size() int {
	return xxx_messageInfo_Ball.Size(m)
}
func (m *Ball) XXX_DiscardUnknown() {
	xxx_messageInfo_Ball.DiscardUnknown(m)
}

var xxx_messageInfo_Ball proto.InternalMessageInfo

func (m *Ball) GetX() int64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Ball) GetY() int64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Ball) GetR() int64 {
	if m != nil {
		return m.R
	}
	return 0
}

type MoveBall struct {
	Ball                 *Ball    `protobuf:"bytes,1,opt,name=ball,proto3" json:"ball,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MoveBall) Reset()         { *m = MoveBall{} }
func (m *MoveBall) String() string { return proto.CompactTextString(m) }
func (*MoveBall) ProtoMessage()    {}
func (*MoveBall) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cd38c31e685b6f4, []int{3}
}

func (m *MoveBall) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MoveBall.Unmarshal(m, b)
}
func (m *MoveBall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MoveBall.Marshal(b, m, deterministic)
}
func (m *MoveBall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoveBall.Merge(m, src)
}
func (m *MoveBall) XXX_Size() int {
	return xxx_messageInfo_MoveBall.Size(m)
}
func (m *MoveBall) XXX_DiscardUnknown() {
	xxx_messageInfo_MoveBall.DiscardUnknown(m)
}

var xxx_messageInfo_MoveBall proto.InternalMessageInfo

func (m *MoveBall) GetBall() *Ball {
	if m != nil {
		return m.Ball
	}
	return nil
}

func init() {
	proto.RegisterType((*Pedal)(nil), "protobuf.Pedal")
	proto.RegisterType((*MovePedal)(nil), "protobuf.MovePedal")
	proto.RegisterType((*Ball)(nil), "protobuf.Ball")
	proto.RegisterType((*MoveBall)(nil), "protobuf.MoveBall")
}

func init() { proto.RegisterFile("pong.proto", fileDescriptor_6cd38c31e685b6f4) }

var fileDescriptor_6cd38c31e685b6f4 = []byte{
	// 217 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0xc8, 0xcf, 0x4b,
	0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x00, 0x53, 0x49, 0xa5, 0x69, 0x4a, 0xf6, 0x5c,
	0xac, 0x01, 0xa9, 0x29, 0x89, 0x39, 0x42, 0x3c, 0x5c, 0x8c, 0x15, 0x12, 0x8c, 0x0a, 0x8c, 0x1a,
	0xcc, 0x41, 0x8c, 0x15, 0x20, 0x5e, 0xa5, 0x04, 0x13, 0x84, 0x57, 0x09, 0xe2, 0x95, 0x4b, 0x30,
	0x43, 0x78, 0xe5, 0x20, 0x5e, 0x86, 0x04, 0x0b, 0x84, 0x97, 0xa1, 0x64, 0xc4, 0xc5, 0xe9, 0x9b,
	0x5f, 0x96, 0x0a, 0x31, 0x44, 0x95, 0x8b, 0xb5, 0x00, 0xc4, 0x00, 0x1b, 0xc4, 0x6d, 0xc4, 0xaf,
	0x07, 0xb3, 0x47, 0x0f, 0x2c, 0x1f, 0x04, 0x91, 0x55, 0x32, 0xe0, 0x62, 0x71, 0x4a, 0xcc, 0x21,
	0x68, 0x67, 0x11, 0xcc, 0xce, 0x22, 0x25, 0x3d, 0x2e, 0x0e, 0x90, 0x2d, 0x60, 0x5d, 0x4a, 0x5c,
	0x2c, 0x49, 0x89, 0x39, 0x30, 0x3b, 0xf8, 0x10, 0x76, 0x80, 0x64, 0x83, 0xc0, 0x72, 0x46, 0x6e,
	0x5c, 0x3c, 0x60, 0x1b, 0x83, 0x53, 0x8b, 0xca, 0x32, 0x93, 0x53, 0x85, 0xcc, 0xb8, 0x58, 0x40,
	0xfa, 0x85, 0x84, 0x11, 0xaa, 0xe1, 0xae, 0x96, 0xc2, 0x26, 0xa8, 0xc4, 0xa0, 0xc1, 0x68, 0xc0,
	0x68, 0xe4, 0xcc, 0xc5, 0x0d, 0x32, 0x15, 0x66, 0x8c, 0x09, 0xd4, 0x18, 0x21, 0x54, 0x1d, 0x20,
	0x25, 0x52, 0x58, 0xc4, 0x20, 0x86, 0x24, 0xb1, 0x81, 0x25, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xd4, 0x21, 0x82, 0x31, 0x82, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PedalServiceClient is the client API for PedalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PedalServiceClient interface {
	Move(ctx context.Context, opts ...grpc.CallOption) (PedalService_MoveClient, error)
}

type pedalServiceClient struct {
	cc *grpc.ClientConn
}

func NewPedalServiceClient(cc *grpc.ClientConn) PedalServiceClient {
	return &pedalServiceClient{cc}
}

func (c *pedalServiceClient) Move(ctx context.Context, opts ...grpc.CallOption) (PedalService_MoveClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PedalService_serviceDesc.Streams[0], "/protobuf.PedalService/Move", opts...)
	if err != nil {
		return nil, err
	}
	x := &pedalServiceMoveClient{stream}
	return x, nil
}

type PedalService_MoveClient interface {
	Send(*MovePedal) error
	Recv() (*MovePedal, error)
	grpc.ClientStream
}

type pedalServiceMoveClient struct {
	grpc.ClientStream
}

func (x *pedalServiceMoveClient) Send(m *MovePedal) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pedalServiceMoveClient) Recv() (*MovePedal, error) {
	m := new(MovePedal)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PedalServiceServer is the server API for PedalService service.
type PedalServiceServer interface {
	Move(PedalService_MoveServer) error
}

// UnimplementedPedalServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPedalServiceServer struct {
}

func (*UnimplementedPedalServiceServer) Move(srv PedalService_MoveServer) error {
	return status.Errorf(codes.Unimplemented, "method Move not implemented")
}

func RegisterPedalServiceServer(s *grpc.Server, srv PedalServiceServer) {
	s.RegisterService(&_PedalService_serviceDesc, srv)
}

func _PedalService_Move_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PedalServiceServer).Move(&pedalServiceMoveServer{stream})
}

type PedalService_MoveServer interface {
	Send(*MovePedal) error
	Recv() (*MovePedal, error)
	grpc.ServerStream
}

type pedalServiceMoveServer struct {
	grpc.ServerStream
}

func (x *pedalServiceMoveServer) Send(m *MovePedal) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pedalServiceMoveServer) Recv() (*MovePedal, error) {
	m := new(MovePedal)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PedalService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.PedalService",
	HandlerType: (*PedalServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Move",
			Handler:       _PedalService_Move_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pong.proto",
}

// BallServiceClient is the client API for BallService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BallServiceClient interface {
	Move(ctx context.Context, opts ...grpc.CallOption) (BallService_MoveClient, error)
}

type ballServiceClient struct {
	cc *grpc.ClientConn
}

func NewBallServiceClient(cc *grpc.ClientConn) BallServiceClient {
	return &ballServiceClient{cc}
}

func (c *ballServiceClient) Move(ctx context.Context, opts ...grpc.CallOption) (BallService_MoveClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BallService_serviceDesc.Streams[0], "/protobuf.BallService/Move", opts...)
	if err != nil {
		return nil, err
	}
	x := &ballServiceMoveClient{stream}
	return x, nil
}

type BallService_MoveClient interface {
	Send(*MoveBall) error
	Recv() (*MoveBall, error)
	grpc.ClientStream
}

type ballServiceMoveClient struct {
	grpc.ClientStream
}

func (x *ballServiceMoveClient) Send(m *MoveBall) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ballServiceMoveClient) Recv() (*MoveBall, error) {
	m := new(MoveBall)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BallServiceServer is the server API for BallService service.
type BallServiceServer interface {
	Move(BallService_MoveServer) error
}

// UnimplementedBallServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBallServiceServer struct {
}

func (*UnimplementedBallServiceServer) Move(srv BallService_MoveServer) error {
	return status.Errorf(codes.Unimplemented, "method Move not implemented")
}

func RegisterBallServiceServer(s *grpc.Server, srv BallServiceServer) {
	s.RegisterService(&_BallService_serviceDesc, srv)
}

func _BallService_Move_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BallServiceServer).Move(&ballServiceMoveServer{stream})
}

type BallService_MoveServer interface {
	Send(*MoveBall) error
	Recv() (*MoveBall, error)
	grpc.ServerStream
}

type ballServiceMoveServer struct {
	grpc.ServerStream
}

func (x *ballServiceMoveServer) Send(m *MoveBall) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ballServiceMoveServer) Recv() (*MoveBall, error) {
	m := new(MoveBall)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _BallService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.BallService",
	HandlerType: (*BallServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Move",
			Handler:       _BallService_Move_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pong.proto",
}
